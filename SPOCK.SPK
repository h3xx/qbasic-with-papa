    PROGRAM SPOCK
      CLEAR, 32000
      DIM S1(300),S2(300),S3$(300) 'STACK
      IM=300 'MAX STACK LENGTH
      QT$=CHR$(34) 'QUOTE CHAR
      QL$=CHR$(91) 'LEFT BRACKET CHAR
      QR$=CHR$(93) 'RIGHT BRACKET CHAR
      LK=1 'LABEL COUNTER, FOR INTRODUCED LABELS
      IS=IM+1 'CLEAR STORAGE
      LINE INPUT "PROGRAM NAME=";IR$ 'ACCEPT PROGRAM FILE NAME
      OPEN"I",#1,IR$+".SPK"  'OPEN SOURCE
      OPEN"O",#4,IR$+".BAS"  'OPEN OBJECT
      LINE INPUT "DO YOU WANT DEBUG OUTPUT?(Y/N)";YN$
      C$=MID$(YN$,1,1)
      IF C$="Y" OR C$="y" THEN
        MODE=1
      ELSE
        MODE=0
      END IF
      WR$="" 'CLEAR WRITE RECORD
      IP=0  ' INDEX USED TO PUSH ITEM INTO STACK
      EP=0  'END OF PROGRAM OR SUBPROGRAM FLAG
      SK=1   ' SCRATCH FILE STATEMENT COUNTER
      PT=0   ' PREV. OUTPUT LINE TYPE (USED FOR PASS 1 OUTPUT)
      EK=0 'ERROR COUNT
      DK=0 ' DOT COUNT
      OPEN"O",#2,"SCRATCH1" 'OPEN SCRATCH STATEMENT FILE
      OPEN"O",#3,"SCRATCH2" 'OPEN FIRST SCRATCH LABEL FILE
      WHILE NOT EOF(1) '* LOOP FOR EACH INPUT FILE LINE
        LINE INPUT#1,IR$ 'READ SOURCE STATEMENT
        GOSUB DOTS
        IF MODE=1 THEN
          PRINT#2," 8 ---------------------------------"+IR$
        END IF 
        IL=LEN(IR$) 'DETN. LENGTH
        IR=1 'SET EXTRACTION INDEX
        WHILE IR<=IL '* LOOP FOR EACH STATEMENT IN THE LINE
          GOSUB XSTAT 'EXTRACT STATEMENT
          IF IE>=IB THEN 
            GOSUB PSTAT 'PROCESS STATEMENT
          END IF
          IF EP<>0 THEN 'END OF PROGRAM OR SUBR. MODULE
            IF IP <>0 THEN 'STACK SHOULD BE EMPTY 
              IP=0: ER$="STRUCTURE": GOSUB ERRORX
            END IF
            GOSUB DUMPLAB 'DUMP LABEL STORAGE
            EP=0
          END IF
        WEND
      WEND 'END OF LOOP FOR EACH INPUT LINE
      IF IP<>0 THEN  'STACK SHOULD BE EMPTY
        ER$="FILE ENDING STRUCTURE": GOSUB ERRORX
      END IF
      PRINT
      PRINT "!!!!!!";EK;" PASS-ONE ERRORS"
      PRINT#2, " 8 REM !!!!!!";EK;" PASS-ONE ERRORS"
      CLOSE(2): CLOSE(3)
      GOSUB PASS2
      CLOSE (1): CLOSE(2): CLOSE(3): CLOSE(4)
      STOP 
   END PROGRAM
'--------------------------------                          
       SUBROUTINE XSTAT ' EXTRACT STATEMENT
XSTAT:    I=1 'STATE           
          L=0 'BACKUP ONE CHAR. FLAG
          IW=IP 'WORKING INDEX
          IB=IW+1 'BEG. OF STAT. INDEX
          IE=IB-1 'END  OF STAT. INDEX
          TK$=""
          'LOOP FOR ALL CHARS UP TO COLON, REMARK, OR END-OF-LINE
          WHILE TK$<>":"                                     
            IF L=0 THEN   ' EXTRACT NEXT CHAR.
              IF IR<=IL THEN
                C$=MID$(IR$,IR,1): IR=IR+1
              ELSE
                C$=":" 'TREAT END-OF-LINE AS ":"
              END IF
            ELSE   ' BACK-UP (TAKE PREV. CHAR.)
              L=0 
            END IF
            K=1
            IF I=1 THEN
              WHILE C$=" "
                IF IR<=IL THEN
                  C$=MID$(IR$,IR,1): IR=IR+1
                ELSE
                  C$=":" 'TREAT END-OF-LINE AS ":"
                END IF
              WEND
              IF "A"<=C$ AND C$<="Z" THEN
                IF IR=2 THEN
                  J=8:I=15
                ELSE
                  J=1:I=2
                END IF
              ELSEIF "a"<=C$ AND C$<="z" THEN      
                C$=CHR$(ASC(C$)-32)        
                IF IR=2 THEN
                  J=8:I=15
                ELSE
                  J=1:I=2
                END IF            
              ELSEIF "0"<=C$ AND C$<="9" THEN
                J=2:I=3
              ELSEIF C$="." THEN
                J=6:I=4  
              ELSEIF C$="<" THEN
                J=7:I=9
              ELSEIF C$=">" THEN
                J=7:I=10
              ELSEIF C$=QT$ THEN
                J=3:I=11
              ELSEIF C$="&" THEN
                J=5:I=12
              ELSE
                J=7:K=2
              END IF
              GOTO ACT
            END IF       
            IF I=2 THEN
              IF "A"<=C$ AND C$<="Z" THEN
                K=1
              ELSEIF "a"<=C$ AND C$<="z" THEN      
                C$=CHR$(ASC(C$)-32)        
              ELSEIF "0"<=C$ AND C$<="9" THEN
                K=1
              ELSEIF C$="$" THEN
                I=1:K=2
              ELSEIF C$="%" THEN
                I=1:K=2
              ELSE
                I=1:K=3
              END IF
              GOTO ACT
            END IF
            IF I=3 THEN
              IF "0"<=C$ AND C$<="9" THEN
                K=1
              ELSEIF C$="." THEN
                J=6:I=4
              ELSEIF C$="E" OR C$="e" THEN
                J=6:I=6
              ELSE
                I=1:K=3
              END IF
              GOTO ACT
            END IF
            IF I=4 THEN
              IF "0"<=C$ AND C$<="9" THEN
                I=5
              ELSE
                I=1:K=4
              END IF
              GOTO ACT
            END IF
            IF I=5 THEN
              IF "0"<=C$ AND C$<="9" THEN
                K=1
              ELSEIF C$="E" OR C$="e"  THEN
                I=6
              ELSE
                I=1:K=3
              END IF
              GOTO ACT
            END IF
            IF I=6 THEN
              IF "0"<=C$ AND C$<="9" THEN
                I=8
              ELSEIF C$="+" OR C$="-" THEN
                I=7
              ELSE
                I=1:K=4
              END IF
              GOTO ACT
            END IF            
            IF I=7 THEN
              IF "0"<=C$ AND C$<="9" THEN
                I=8
              ELSE
                I=1:K=4
              END IF
              GOTO ACT
            END IF
            IF I=8 THEN
              IF "0">C$ OR C$>"9" THEN
                I=1:K=3
              END IF
              GOTO ACT
            END IF
            IF I=9 THEN
              I=1
              IF C$=">" OR C$="=" THEN
                K=2
              ELSE
                K=3
              END IF
              GOTO ACT
            END IF
            IF I=10 THEN
              I=1
              IF C$="=" THEN
                K=2
              ELSE
                K=3
              END IF
              GOTO ACT
            END IF
            IF I=11 THEN
              IF C$=QT$ THEN 
                I=1:K=2
              ELSE
                K=1
              END IF
              GOTO ACT
            END IF
            IF I=12 THEN
              IF C$="O" OR C$="o"  THEN
                J=4:I=13
              ELSEIF C$="H" C$="h" THEN
                J=5:I=14
              ELSE
                J=7:I=1:K=3
              END IF
              GOTO ACT
            END IF
            IF I=13 THEN
              IF "0">C$ OR C$>"7" THEN
                I=1:K=3
              END IF
              GOTO ACT
            END IF  
            IF I=14 THEN
              IF "0"<=C$ AND C$<="9" THEN
                K=1
              ELSEIF "A"<=C$ AND C$<="F" THEN
                K=1
              ELSEIF "a"<=C$ AND C$<="f" THEN      
                C$=CHR$(ASC(C$)-32)        
              ELSE
                I=1:K=3
              END IF
              GOTO ACT
            END IF
          ' I=15
              IF "A"<=C$ AND C$<="Z" THEN
                K=1
              ELSEIF "a"<=C$ AND C$<="z" THEN      
                C$=CHR$(ASC(C$)-32)        
              ELSEIF "0"<=C$ AND C$<="9" THEN
                K=1
              ELSE
                I=1:K=3
              END IF            
ACT:        IF K=1 OR K=2 THEN
              TK$=TK$+C$ 
            END IF
            IF K=2 OR K=3 THEN 
              IF TK$="'" THEN 'START OF A REMARK
                IR=IL+1: TK$=":" 'TREAT THE REMARK AS ":"
              END IF
              IF TK$<>":" THEN
                IW=IW+1
                IF IW>IS THEN
                  IW=IW-1: ER$="STACK O'FLOW": GOSUB ERRORX
                END IF
                S1(IW)=J: S3$(IW)=TK$: IE=IW
                TK$=""
              END IF  
            END IF 
            IF K=3 OR K=4 THEN
              L=1
            END IF
            IF K=4 THEN 
              ER$="BAD TOKEN="+TK$: GOSUB ERRORX
            END IF
          WEND
          RETURN 
       END SUBROUTINE
'---------------------------------
      SUBROUTINE PSTAT
PSTAT:    IF S1(IB)=8 THEN 'FIRST TOKEN IS LABEL
            IF IB<>IE THEN
              ER$="LABEL": GOSUB ERRORX
            END IF
            TK$=S3$(IB)
            FOR I=IS TO IM
              IF S1(I)=1 AND S3$(I)=TK$ THEN
                ER$="DUPL. LABEL"+TK$: GOSUB ERRORX
              END IF
            NEXT I
            K=1: GOSUB LABEL: RETURN
          END IF
          CD$=S3$(IB) 'GET CODE 
          IF CD$="END" THEN
            TK$=S3$(IB+1)
            IF TK$="IF" THEN 
              TK$=S3$(IP)
              IF TK$="IF" OR TK$="ELSEIF" THEN
                TK$=STR$(S2(IP)): K=1: GOSUB LABEL
              ELSEIF TK$<>"ELSE" THEN
                GOTO STERR
              END IF
              '........ 
              TK$=STR$(S1(IP)):K=1: GOSUB LABEL
              IP=IP-1                
            ELSEIF TK$="LOOP" OR TK$="WHILE" THEN
              IF S3$(IP)<>"LOOP" THEN
                GOTO STERR
              END IF
              TK$=STR$(S1(IP)): WR$="GOTO"+QL$+TK$+QR$
              ST=4: GOSUB OUTLINE
              K=S2(IP) 'CHECK FOR LOOP EXITED
              IF K<>0 THEN
                TK$=STR$(S1(IP)+2): K=1: GOSUB LABEL
              END IF
              IP=IP-1
            ELSEIF TK$="SUBROUTINE" OR TK$="PROGRAM" THEN
              IF S3$(IP)<>TK$ THEN
                GOTO STERR
              END IF 
              IP=IP-1: EP=1
            ELSE
              GOTO SYERR
            END IF
            RETURN       
          END IF
          IF CD$="IF" THEN
            GOSUB CKEXEC1
            I1=IB: I2=IE: GOSUB OUTSTAT
            IF S3$(IE)<>"THEN" THEN
              ER$="SHOULD USE SPOCK IF STAT.": GOSUB ERRORX
              ST=1: GOSUB OUTLINE: RETURN
            END IF
            TK$=STR$(LK)
            WR$=WR$+QL$+TK$+QR$+"ELSE"+QL$+STR$(LK+2)+QR$
            JJ=IB+1: KK=IE-1: GOSUB DEMORG
            ST=5: GOSUB OUTLINE
            K=1: GOSUB LABEL
            J=LK+1: K=LK+2: TK$=CD$: GOSUB PUSH: LK=LK+3: RETURN
          END IF
          IF CD$="ELSE" THEN
            TK$=S3$(IP)
            IF TK$<>"IF" AND TK$<>"ELSEIF" THEN
              GOTO STERR
            END IF
            IF S3$(IB+1)="IF" THEN
              IF S3$(IE)<>"THEN" THEN
                GOTO SYERR
              END IF
              TK$=STR$(S1(IP))
              WR$="GOTO"+QL$+TK$+QR$: ST=4: GOSUB OUTLINE
              TK$=STR$(S2(IP)): K=1: GOSUB LABEL
              I1=IB+1: I2=IE: GOSUB OUTSTAT
              TK$=STR$(LK)
              WR$=WR$+QL$+TK$+QR$+"ELSE"+QL$+STR$(LK+1)+QR$
              JJ=IB+2: KK=IE-1: GOSUB DEMORG
              ST=5: GOSUB OUTLINE
              S2(IP)=LK+1: S3$(IP)="ELSEIF"
              K=1: GOSUB LABEL: LK=LK+2
            ELSE
              IF IB<>IE THEN
                GOTO SYERR
              END IF
              S3$(IP)="ELSE": TK$=STR$(S1(IP))
              WR$="GOTO"+QL$+TK$+QR$: ST=4: GOSUB OUTLINE
              TK$=STR$(S2(IP)): K=1: GOSUB LABEL
            END IF
            RETURN 
          END IF
          IF CD$="ELSEIF" THEN
            TK$=S3$(IP)
            IF TK$<>"IF" AND TK$<>"ELSEIF" THEN
              GOTO SYERR
            END IF  
            IF S3$(IE)<>"THEN" THEN
              GOTO SYERR
            END IF
            TK$=STR$(S1(IP))
            WR$="GOTO"+QL$+TK$+QR$: ST=4: GOSUB OUTLINE
            TK$=STR$(S2(IP)): K=1: GOSUB LABEL
            WR$="IF ": I1=IB+1: I2=IE: GOSUB OUTSTAT
            TK$=STR$(LK)
            WR$=WR$+QL$+TK$+QR$+"ELSE"+QL$+STR$(LK+1)+QR$
            JJ=IB+1: KK=IE-1: GOSUB DEMORG
            ST=5: GOSUB OUTLINE
            S2(IP)=LK+1: S3$(IP)="ELSEIF"
            K=1: GOSUB LABEL: LK=LK+2
            RETURN 
          END IF 
          IF CD$="LOOP" THEN
            GOSUB CKEXEC1: J=LK: K=0: TK$=CD$: GOSUB PUSH
            TK$=STR$(LK): K=1: GOSUB LABEL
            IF IE>IB THEN
              IF S3$(IB+1)<>"WHILE" THEN
                GOTO SYERR
              END IF
              WR$="IF ": I1=IB+2: I2=IE: GOSUB OUTSTAT
              WR$=WR$+" THEN": 
              WR$=WR$+QL$+STR$(LK+1)+QR$+"ELSE"+QL$+STR$(LK+2)+QR$
              JJ=IB+2: KK=IE: GOSUB DEMORG
              ST=5: GOSUB OUTLINE
              TK$=STR$(LK+1): K=1: GOSUB LABEL
              S2(IP)=1 'MARK LOOP AS EXITED
            END IF
            LK=LK+3: RETURN
          END IF
          IF CD$="FOR" THEN
            GOSUB CKEXEC1
            J=LK: K=0: TK$=CD$: GOSUB PUSH
            LK=LK+1: I1=IB: I2=IE: GOSUB OUTSTAT
            ST=1: GOSUB OUTLINE: RETURN
          END IF
          IF CD$="NEXT" THEN    
            IF S3$(IP)<>"FOR" THEN
              GOTO STERR
            END IF
            J=S1(IP): K=S2(IP): IP=IP-1
            I1=IB: I2=IE: GOSUB OUTSTAT
            ST=1: GOSUB OUTLINE
            IF K<>0 THEN
              TK$=STR$(J): K=1: GOSUB LABEL
            END IF
            RETURN
          END IF
          IF CD$="WHILE" THEN
            GOSUB CKEXEC1: J=LK: K=0: TK$="LOOP": GOSUB PUSH
            TK$=STR$(LK): K=1: GOSUB LABEL
            IF IE=IB THEN
              GOTO SYERR
            END IF
            WR$="IF ": I1=IB+1: I2=IE: GOSUB OUTSTAT
            WR$=WR$+" THEN": 
            WR$=WR$+QL$+STR$(LK+1)+QR$+"ELSE"+QL$+STR$(LK+2)+QR$
            JJ=IB+1: KK=IE: GOSUB DEMORG
            ST=5: GOSUB OUTLINE
            TK$=STR$(LK+1): K=1: GOSUB LABEL
            S2(IP)=1 'MARK LOOP AS EXITED
            LK=LK+3: RETURN
          END IF
          IF CD$="WEND" THEN
            IF IB<>IE THEN
              ER$="SYNTAX": GOSUB ERRORX
            END IF
            IF S3$(IP)<>"LOOP" THEN
              GOTO STERR
            END IF
            TK$=STR$(S1(IP)): WR$="GOTO"+QL$+TK$+QR$
            ST=4: GOSUB OUTLINE
            K=S2(IP) 'CHECK FOR LOOP EXITED
            IF K<>0 THEN
              TK$=STR$(S1(IP)+2): K=1: GOSUB LABEL
            END IF
            IP=IP-1
            RETURN
          END IF
          IF CD$="GOSUB" THEN
            GOSUB CKEXEC1
            IF S1(IE)<>1 OR IE<>IB+1 THEN
              GOTO SYERR
            END IF
            S3$(IE)=QL$+S3$(IE)+QR$
            I1=IB: I2=IE: GOSUB OUTSTAT
            ST=7: GOSUB OUTLINE: RETURN
          END IF
          IF CD$="EXIT" THEN
            N=0:
            FOR I=IB TO IE 'COUNT NO. OF EXITS IN STAT.
              IF S3$(I)<>"EXIT" THEN
                GOTO STERR
              END IF
              N=N+1
            NEXT I
            FOR I=IP TO 1 STEP -1  
              IF S3$(I)="FOR" THEN
                N=N-1: K=0
              ELSEIF S3$(I)="LOOP" THEN
                N=N-1: K=2
              END IF
              IF N=0 THEN
                S2(I)=1 'MARK LOOP AS EXITED
                TK$=STR$(S1(I)+K): WR$="GOTO"+QL$+TK$+QR$
                ST=4: GOSUB OUTLINE
                GOTO EXITP3
              END IF
            NEXT I
EXITP3:     IF N<>0 THEN
              GOTO STERR
            END IF
            RETURN 
          END IF          
          IF CD$="PROGRAM" THEN
            IF IP<>0 THEN
              GOTO STERR
            END IF
            J=0: K=0: TK$=CD$
            GOSUB PUSH
            I1=IB: I2=IE: GOSUB OUTSTAT
            ST=0: GOSUB OUTLINE 'OUTPUT AS A REMARK
            RETURN
          END IF   
          IF CD$="SUBROUTINE" THEN
            IF IP<>0 THEN
              ER$="STRUCTURE": GOSUB ERRORX: IP=0
            END IF
            J=0: K=0: TK$=CD$: GOSUB PUSH
            I1=IB: I2=IE: GOSUB OUTSTAT
            ST=0: GOSUB OUTLINE 
            TK$=S3$(IB+1): K=5: GOSUB LABEL: RETURN
          END IF
          IF CD$="GOTO" THEN
            IF S1(IE)<>1 OR IE<>IB+1 THEN
              GOTO SYERR
            END IF
            TK$=S3$(IE) 
            S3$(IE)=QL$+TK$+QR$: S1(IE)=5
            I1=IB: I2=IE: GOSUB OUTSTAT
            ST=4: GOSUB OUTLINE: RETURN
          END IF  
          IF CD$="RETURN" OR CD$="STOP" THEN
            IF IB<>IE THEN
              GOTO SYERR
            END IF
            WR$=CD$: ST=2: GOSUB OUTLINE: RETURN
          END IF  
          'SOME OTHER CODE
          I1=IB: I2=IE: GOSUB OUTSTAT
          ST=1: GOSUB OUTLINE
          RETURN
STERR:    ER$="STRUCTURE": GOSUB ERRORX
          FOR I=1 TO IP
            PRINT S1(I);S2(I);S3$(I)
          NEXT I
          RETURN
SYERR:    ER$="SYNTAX": GOSUB ERRORX: RETURN
       END SUBROUTINE PSTAT
'--------------------------------------------------------
      SUBROUTINE PUSH
          'PUSH STAT. INFO INTO STACK 
PUSH:     IP=IP+1: S1(IP)=J: S2(IP)=K: S3$(IP)=TK$
          RETURN
      END SUBROUTINE
'-------------------------------------------------------- 
      SUBROUTINE LABEL
LABEL:    'SAVE LABEL IN STORAGE
          IS=IS-1:  
          IF IS>IW THEN
            IF K=1 THEN 'ORDINARY LABEL
              S1(IS)=1: S2(IS)=SK: S3$(IS)=TK$
              ST=3 'ORDINARY LABEL
              WR$=QL$+TK$+QR$: GOSUB OUTLINE
            ELSEIF K=2 THEN ' LABEL-EQUATED GOTO 
              S1(IS)=2: S2(IS)=SK: S3$(IS)=TK$
            ELSEIF K=3 THEN ' LABEL-EQUATED RETURN OR STOP
              S1(IS)=3: S2(IS)=SK: S3$(IS)=TK$
            ELSE
              ' K=5
              ST=6 'SUBR. LABEL
              S1(IS)=5: S2(IS)=SK: S3$(IS)=TK$   
              WR$=QL$+TK$+QR$: GOSUB OUTLINE
            END IF
          ELSE
            ER$="STACK O'FLOW": GOSUB ERRORX: IS=IS+1
          END IF
          RETURN
      END SUBROUTINE
'--------------------------------------------------------
       SUBROUTINE OUTSTAT 
          'OUTPUT STATEMENT TOKENS ONTO WRITE RECORD WR$
OUTSTAT:  FOR I=I1 TO I2
            IF I>I1 THEN
              IF S1(I-1)<>7 THEN 'PV. DELIM.
                IF S1(I)<>7 THEN 'CURR. DELIM
                  WR$=WR$+" " 'INSERT BLANK BETWEEN MOST TOKENS
                END IF
              END IF
            END IF
            WR$=WR$+S3$(I)
          NEXT I
          RETURN
       END SUBROUTINE
'-------------------------------------------------------- 
       SUBROUTINE OUTLINE
          ' PASS 1, WRITES STAT. TYPE AND STAT. ONTO SCRATCH
          'INPUTS= ST, PT, (ALSO TK$ IF OUTPUTTING EXIT OR GOTO)
OUTLINE:  PRINT#2,ST;WR$ 'WRITE STAT. TYPE AND WR$
          IF PT=3 THEN
            'PREV. STAT. IS A LABEL
            IF ST=3 THEN
             'CURR. STAT = LABEL
              S2(IS+1)=-IS 'EQUATE PREV. LABEL TO CURRENT
            ELSEIF ST=4 THEN
              'CURRENT STAT IS A GOTO  
              K=2: GOSUB LABEL 'SAVE GOTO
              S2(IS+1)=-IS 'EQUATE PREV. LABEL TO GOTO
            ELSEIF ST=2 THEN
              'CURR. = RETN OR STOP
              K=3: TK$=S3$(IB): GOSUB LABEL 'SAVE RETN OR STOP
              S2(IS+1)=-IS 'EQUATE LABEL TO RETN OR STOP
            END IF
          END IF
          IF ST<>0 THEN 'CURR. NOT REMK.
            PT=ST 'SET PREV TYPE=CURR TYPE
          END IF
          WR$="": SK=SK+1 'CLEAR WR$, ADV. SCRATCH FILE COUNT
          RETURN
       END SUBROUTINE
'--------------------------------------------------------
       SUBROUTINE CKEXEC1  'CHECK FOR EXECUTABLE IN PROG OR SUBR    
CKEXEC1:  IF IP<=0 THEN 
            ER$="STAT. CAN'T BE REACHED": GOSUB ERRORX
          END IF
          RETURN
       END SUBROUTINE
'-------------------------------------------------------- 
       SUBROUTINE ERRORX  
ERRORX:   PRINT
          PRINT"!!!!!! "+ER$+" ERROR": PRINT IR$
          PRINT#2," 8 !!!!!! "+ER$+" ERROR": SK=SK+1
          DK=0 'DOT COUNT
          EK=EK+1
          DK=0 
          RETURN
       END SUBROUTINE
'--------------------------------------------------------
       SUBROUTINE DUMPLAB
DUMPLAB:  J=IM+1
          FOR I=IS TO IM
            K=S1(I): TK$=S3$(I)
            IF K=5 THEN 'FIRST SUBR LABEL 
              J=I: GOTO EXITD2
            ELSEIF K=2 THEN 'LABEL-EQUATED GOTO
              FOR JJ=IS TO IM
                IF S1(JJ)=1 AND S3$(JJ)=TK$ THEN
                  L=S2(JJ) 'EQUATE GOTO TO GOTO LABEL
                  GOTO EXITD1            
                END IF
              NEXT 
            ELSE 'K=1 OR 3
              L=S2(I)
            END IF
EXITD1:     IF L<0 THEN
              L=L+IS-1  'RE-BIAS EQUATE VALUE
            END IF   
            WRITE#3,K,L,TK$
          NEXT I
EXITD2:   IS=J
          WRITE#3,4,0," "
          RETURN
       END SUBROUTINE
'--------------------------------------------------------
       SUBROUTINE PASS2
PASS2:    FL=0 'FLOW FLAG
          EK=0 'ERROR COUNT
          SK=0 'SCRATCHFILE RECD COUNT
          WR$="" 'WRITE RECORD
          LW=0 'LENGTH WRITE RECORD
          DK=0 ' DOT COUNT
          OPEN"I",#2,"SCRATCH1"
          OPEN"I",#3,"SCRATCH2"
          ' PROCESS SCRATCH1 FILE 
          WHILE EOF(2)=0
            LINE INPUT#2,IR$
            GOSUB DOTS
            ST=VAL(LEFT$(IR$,2))
            IF ST<>8 THEN
              SK=SK+1   
            END IF
            LI=LEN(IR$)-3 
            IR$=RIGHT$(IR$,LI) 'SCRUB NUMBER FROM IR$
            IF ST=0 THEN 'BEG OF PROG OR SUBR
              ' READ NEXT SET OF LABEL INFO FROM SCRATCH2 
              J=0: IW=1
              WHILE J<>4         
                INPUT#3,J,S2(IW),S3$(IW)
                S1(IW)=J
                IW=IW+1
              WEND 
              GOSUB DUMP
              IR$="REM "+IR$: GOSUB PACK: GOSUB DUMP: FL=1   
            ELSEIF ST=1 THEN 'EXECUTABLE-FLOW
              GOSUB CKFLOW
              GOSUB PACK: FL=1
            ELSEIF ST=2 THEN 'QUITFLOW
              K=0
              IF FL=0 THEN
                FOR I=1 TO IW
                  IF S1(I)=3 AND S2(I)=SK THEN
                    K=1
                  END IF
                NEXT I
                IF K=0 THEN
                  ER$="NEXT STAT. CAN'T BE REACHED": GOSUB ERRORY
                END IF
              END IF
              IF K=0 THEN
                GOSUB PACK: GOSUB DUMP: FL=0
              END IF
            ELSEIF ST=3 THEN 'LABEL
              GOSUB XLABEL
              FOR I=1 TO IW 'DUMP IF LABEL NOT EQUATED
                IF S1(I)=1 THEN
                  IF S3$(I)=LB$ THEN
                    IF S2(I)>0 THEN
                      GOSUB XLABEL
                      GOSUB CNVLAB
                      IF LV<>SK THEN
                        ER$="SCRATCH FILE SYNC ERROR": GOSUB ERRORY
                      END IF
                      GOSUB DUMP: FL=1: GOTO EXIT1
                    END IF
                  END IF
                END IF
              NEXT I
            ELSEIF ST=4 THEN 'GOTO
              IF FL=1 THEN
                GOSUB XLABEL
                GOSUB CNVLAB: IR$=LB$
                IF RSF<>3 THEN 'LABEL EQUATED TO RETURN OR STOP
                  IR$="GOTO "+IR$
                END IF
                GOSUB PACK: GOSUB DUMP: FL=0
              END IF
            ELSEIF ST=5 THEN 'IF
              GOSUB CKEXEC2
              I1=3 'LOCATE EXPR 1
              I2=INSTR(5,IR$,"[")-5
              I3=I2+6 'EXTR. LABEL 1
              I4=INSTR(I3+1,IR$,"]")-1
              L1$=MID$(IR$,I3,I4-I3+1)
              I5=I4+7 'EXTR LABEL 2
              I6=INSTR(I5+1,IR$,"]")-1
              L2$=MID$(IR$,I5,I6-I5+1)
              I7=I6+2
              I8=LI               
              X2$=MID$(IR$,I7,I8-I7+1)
              LB$=L1$: GOSUB CNVLAB: L1$=LB$
              IF RSF<>0 THEN
                X1$=MID$(IR$,I1,I2-I1+1) 
                LB$=L2$: GOSUB CNVLAB: L2$=LB$
                IR$="IF"+X1$+" THEN "+L1$+" ELSE"+L2$
                GOSUB PACK: GOSUB DUMP: FL=0
              ELSE
                LB$=L2$: GOSUB CNVLAB: L2$=LB$ 
                IF X2$=" " THEN
                  X1$=MID$(IR$,I1,I2-I1+1) 
                  IR$="IF NOT("+X1$+") THEN "+L2$
                ELSE
                  IR$="IF"+X2$+" THEN "+L2$
                END IF
                GOSUB PACK: FL=1
              END IF
            ELSEIF ST=6 THEN 'SUBR LABEL
              GOSUB DUMP: FL=1
            ELSEIF ST=7 THEN 'GOSUB
              GOSUB CKEXEC2
              GOSUB XLABEL
              K=0
              FOR I=IM TO IS STEP -1
                IF S3$(I)=LB$ AND K=0 THEN
                  K=1:
                  IR$="GOSUB "+STR$(S2(I)+1)
                  GOSUB PACK
                END IF
              NEXT I
              IF K=0 THEN
                IR$="GOSUB "+LB$: GOSUB PACK
                ER$="MISSING SUBR "+LB$: GOSUB ERRORY
              END IF
              FL=1
            ELSE 'ST=8, DEBUG AND ERROR INFO
              PRINT#4," 32000 ";IR$
            END IF
EXIT1:      I=I '.....
          WEND
          GOSUB DUMP
          PRINT
          PRINT "!!!!!!";EK;" PASS-TWO ERRORS"
          PRINT#4," 32000 REM !!!!!!";EK;" PASS-TWO ERRORS"
          RETURN
       END SUBROUTINE
'--------------------------------------------------------
       SUBROUTINE PACK
          'PACK STATEMENT INFO IR$ INTO WRITE RECORD WR$
PACK:     IF LW+LI>60 THEN  'NO ROOM, DUMP
            GOSUB DUMP
          END IF
          IF LW=0 THEN 'START NEW LINE
            WR$=STR$(SK)+" ": LW=LEN(WR$)
          ELSE
            WR$=WR$+": ": LW=LW+2
          END IF
          WR$=WR$+IR$: LW=LW+LI
          RETURN
      END SUBROUTINE
'--------------------------------------------------------
       SUBROUTINE CKEXEC2
CKEXEC2:  IF FL=0 THEN
            ER$="STAT."+STR$(SK)+" CAN'T BE REACHED": GOSUB ERRORY
          END IF
          RETURN
       END SUBROUTINE
'--------------------------------------------------------
       SUBROUTINE DUMP
DUMP:     IF LW<>0 THEN
            PRINT#4,WR$: LW=0
          END IF
          RETURN
       END SUBROUTINE                     
'-------------------------------------------------------- 
       SUBROUTINE CNVLAB
CNVLAB:   EF=0 'EQUATED FLAG
          LV=0 'LABEL VALUE
          RSF=0 'RETURN/STOP FLAG
          FOR I=1 TO IW
            IF S1(I)=1 THEN
              IF S3$(I)=LB$ THEN
                LV=S2(I): GOTO EXITL
              END IF
            END IF
          NEXT I
EXITL:    IF LV<>0 THEN
            K=0
            WHILE LV<0
              EF=1 'LABEL IS EQUATED
              I=-S2(I): LV=S2(I)
              J=S1(I)
              IF J=2 THEN
                RSF=J
              ELSEIF J=3 THEN
                RSF=J: LB$=" "+S3$(I): K=1
              END IF
            WEND
            IF K=0 THEN
              LB$=STR$(LV+1)
            END IF
          ELSE
            ER$="LABEL ["+LB$+"] NOT FOUND": GOSUB ERRORY
          END IF
          RETURN
       END SUBROUTINE
'------------------------------------------- 
       SUBROUTINE CKFLOW
CKFLOW:    IF FL<>1 THEN
            ER$="FLOW ERROR": GOSUB ERRORY
          END IF
          RETURN
       END SUBROUTINE
'------------------------------------------- 
       SUBROUTINE XLABEL
XLABEL:   I1=INSTR(1,IR$,"[")+1
          I2=INSTR(I1+1,IR$,"]")-1
          LB$=MID$(IR$,I1,I2-I1+1)
          RETURN
       END SUBROUTINE
'------------------------------------------- 
       SUBROUTINE ERRORY
ERRORY:   PRINT#4," 32000 !!!!!! "+ER$
          EK=EK+1
          PRINT
          PRINT "!!!!!! "+ER$
          DK=0 'RESET DOT COUNT
          RETURN  
       END SUBROUTINE
'------------------------------------------- 
       SUBROUTINE DOTS
DOTS:     IF DK>50 THEN
            PRINT : DK=0
          END IF            
          PRINT ".";
          DK=DK+1
          RETURN  
       END SUBROUTINE
'---------------------------------------------------
       SUBROUTINE DEMORG
DEMORG:   LV=0 'LEVEL
          AK=0 'AND COUNT
          OK=0 'OR COUNT
          RK=0 'REL. COUNT
          DX$="" ' DEMORGD EXPR
          WR$=WR$+" "
          ' JJ & KK GIVE STACK RANGE OF EXPR 
          FOR I=JJ TO KK
            DT$=S3$(I)
            K=0
            IF S1(I)=7 THEN 'DELIM
              IF DT$="(" THEN
                LV=LV+1
              ELSEIF DT$=")" THEN
                LV=LV-1
              ELSEIF DT$="=" THEN
                DT$="<>": RK=RK+1: K=1
              ELSEIF DT$="<>"THEN
                DT$="=": RK=RK+1: K=1
              ELSEIF DT$="<" THEN
                DT$=">=": RK=RK+1: K=1
              ELSEIF DT$=">=" THEN
                DT$="<": RK=RK+1: K=1
              ELSEIF DT$=">" THEN
                DT$="<=": RK=RK+1: K=1
              ELSEIF DT$="<="THEN
                DT$=">": RK=RK+1: K=1
              END IF
            ELSEIF DT$="AND" THEN
              AK=AK+1: DT$="OR": K=1
            ELSEIF DT$="OR" THEN
              OK=OK+1: DT$="AND": K=1
            ELSEIF DT$="NOT" THEN
              RETURN
            END IF
            IF K=1 THEN
              IF LV<>0 THEN
                RETURN
              END IF
            END IF
            IF S1(I-1)<>7 THEN
              IF S1(I)<>7 THEN
                DX$=DX$+" "
              END IF
            END IF
            DX$=DX$+DT$
          NEXT I 
          IF AK<>0 AND OK<>0 THEN
            RETURN
          END IF
          IF RK<>AK+OK+1 THEN
            RETURN
          END IF
          WR$=WR$+DX$ 'SUCCESS!
          RETURN
        END SUBROUTINE
